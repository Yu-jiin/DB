DATABASE        - 체계적인 데이터 모음
DATA            - 저장이나 처리에 효율적인 형태로 변환된 정보
FIELD(column)   - 고유한 데이터 형식이 지정 
RECORD(row)     - 구체적인 데이터값 저장
Primary  Key    - 기본 키 (식별자)
Foreign Key     - 외래키 (기본 키 참조, 서로 다른 테이블 간 관계 생성)

RDBMS           - DB를 관리하는 SW 프로그램
                - ex) SQLite, MySql, OracleDatabase

SQL             - DB에 정보를 저장하고 처리하기 위한 프로그래밍 언어

SQL Syntax
    1. 대소문자를 구분하지 않음 (하지만 대문자 권장)
    2. 각 SQL Statments 끝에는 세미콜론(';') 필요 
        SELECT column_name FROM table_name;
        - SELECT Statement,  SELECT, FROM 2개의 keyword 구성

DDL(구조)    - CREATE, DROP, ALTER
DQL(검색)    - SELECT
DML(조작)    - INSERT, UPDATE, DELETE
DCL(제어)    - COMMIT, ROLLBACK, GRANT, REVOKE

----------------------------------------------------------------

SELECT Statement    - 테이블에서 데이터를 조회

SELECT 
    select_list     - 선택하려는 데이터 필드
FROM
    table_name;     - 어디 테이블인지 이름 지정 

---------------------------------------------------------------

ORDER BY Statement  - 정렬
                    - 설정안하면 오름차순 기본값
FROM 절 뒤에 위치   

ORDER BY
    column1 [ASC|DESC]

SELECT FirstName from employees ORDER BY "FirstName" ASC;

FILTER
    - DISTINCT  중복 제거


SELECT Statement 실행 순서

FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY -> LIMIT

----------------------------------------------------------------------------

오후 수업 

DDL - 기본 구조 및 형식 만들기

CREATE TABLE examples (
    -- 테이블 구성 요소
    -- 컬럼명 데이터타입 제약조건,
    ExamID INTEGER PRIMARY KEY AUTOINCREMENT,
    LastName VARCHAR(50) NOT NULL,
    FirstName VARCHAR(50) NOT NULL
);

ALTER TABLE ADD COLUMN      - 필드 추가
ALTER TABLE RENAME column   - 필드 이름 변경
ALTER TABLE DROP column     - 필드 삭제
ALTER TABLE RENAME TO       - 테이블 이름 변경


ALTER TABLE examples
ADD COLUMN Country VARCHAR(100) NOT NULL;

----------------------------------------------------------------

JOIN 관계 

CREATE TABLE users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name VARCHAR(50) NOT NULL
);

CREATE TABLE articles (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title VARCHAR(50) NOT NULL,
  content VARCHAR(100) NOT NULL,
  userId INTEGER NOT NULL,
  FOREIGN KEY (userId) 
    REFERENCES users(id)
);

-----------------------------------------------------------------

N : 1  /  1 : N
    - 한 테이블의 0개 이상의 레코드가 다른 테이블 레코드 한개와 관련
    - 0개 이상의 댓글은 1개의 게시글에 작성될 수 있음


class Comment(models.Model):
    # 참조하려는 대상의 단수형을 외래키로
    article = models.ForeignKey(Article, on_delete=models.CASCADE)
    content = models.CharField(max_length=200)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

CASCADE = 부모객체 삭제 시 자식 객체도 삭제
  
